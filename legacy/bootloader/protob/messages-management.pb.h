/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.4 */

#ifndef PB_HW_TREZOR_MESSAGES_MANAGEMENT_MESSAGES_MANAGEMENT_PB_H_INCLUDED
#define PB_HW_TREZOR_MESSAGES_MANAGEMENT_MESSAGES_MANAGEMENT_PB_H_INCLUDED
#include "pb.h"

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum _BackupType {
    BackupType_Bip39 = 0,
    BackupType_Slip39_Basic = 1,
    BackupType_Slip39_Advanced = 2
} BackupType;

typedef enum _SafetyCheckLevel {
    SafetyCheckLevel_Strict = 0,
    SafetyCheckLevel_PromptAlways = 1,
    SafetyCheckLevel_PromptTemporarily = 2
} SafetyCheckLevel;

typedef enum _Capability {
    Capability_Capability_Bitcoin = 1,
    Capability_Capability_Bitcoin_like = 2,
    Capability_Capability_Binance = 3,
    Capability_Capability_Cardano = 4,
    Capability_Capability_Crypto = 5,
    Capability_Capability_EOS = 6,
    Capability_Capability_Ethereum = 7,
    Capability_Capability_Lisk = 8,
    Capability_Capability_Monero = 9,
    Capability_Capability_NEM = 10,
    Capability_Capability_Ripple = 11,
    Capability_Capability_Stellar = 12,
    Capability_Capability_Tezos = 13,
    Capability_Capability_U2F = 14,
    Capability_Capability_Shamir = 15,
    Capability_Capability_ShamirGroups = 16,
    Capability_Capability_PassphraseEntry = 17
} Capability;

typedef enum _ExportType {
    ExportType_SeedEncExportType_NO = 0,
    ExportType_SeedEncExportType_YES = 1,
    ExportType_MnemonicPlainExportType_YES = 2
} ExportType;

typedef enum _SdProtectOperationType {
    SdProtectOperationType_DISABLE = 0,
    SdProtectOperationType_ENABLE = 1,
    SdProtectOperationType_REFRESH = 2
} SdProtectOperationType;

typedef enum _RecoveryDeviceType {
    RecoveryDeviceType_RecoveryDeviceType_ScrambledWords = 0,
    RecoveryDeviceType_RecoveryDeviceType_Matrix = 1
} RecoveryDeviceType;

typedef enum _WordRequestType {
    WordRequestType_WordRequestType_Plain = 0,
    WordRequestType_WordRequestType_Matrix9 = 1,
    WordRequestType_WordRequestType_Matrix6 = 2
} WordRequestType;

typedef enum _SeedRequestType {
    SeedRequestType_SeedRequestType_Gen = 0,
    SeedRequestType_SeedRequestType_EncExport = 1,
    SeedRequestType_SeedRequestType_EncImport = 2
} SeedRequestType;

typedef enum _WL_OperationType {
    WL_OperationType_WL_OperationType_Add = 0,
    WL_OperationType_WL_OperationType_Delete = 1,
    WL_OperationType_WL_OperationType_Inquire = 2
} WL_OperationType;

/* Struct definitions */
typedef struct _BackupDevice {
    char dummy_field;
} BackupDevice;

typedef struct _BixinBackupDevice {
    char dummy_field;
} BixinBackupDevice;

typedef struct _BixinBackupRequest {
    char dummy_field;
} BixinBackupRequest;

typedef struct _BixinReboot {
    char dummy_field;
} BixinReboot;

typedef struct _Cancel {
    char dummy_field;
} Cancel;

typedef struct _CancelAuthorization {
    char dummy_field;
} CancelAuthorization;

typedef struct _DoPreauthorized {
    char dummy_field;
} DoPreauthorized;

typedef struct _EndSession {
    char dummy_field;
} EndSession;

typedef struct _EntropyRequest {
    char dummy_field;
} EntropyRequest;

typedef struct _GetDeviceInfo {
    char dummy_field;
} GetDeviceInfo;

typedef struct _GetFeatures {
    char dummy_field;
} GetFeatures;

typedef struct _GetNextU2FCounter {
    char dummy_field;
} GetNextU2FCounter;

typedef struct _LockDevice {
    char dummy_field;
} LockDevice;

typedef struct _PreauthorizedRequest {
    char dummy_field;
} PreauthorizedRequest;

typedef struct _ReadSEPublicCert {
    char dummy_field;
} ReadSEPublicCert;

typedef struct _ReadSEPublicKey {
    char dummy_field;
} ReadSEPublicKey;

typedef struct _WipeDevice {
    char dummy_field;
} WipeDevice;

typedef struct _ApplyFlags {
    bool has_flags;
    uint32_t flags;
} ApplyFlags;

typedef PB_BYTES_ARRAY_T(1024) ApplySettings_homescreen_t;
typedef struct _ApplySettings {
    bool has_language;
    char language[17];
    bool has_label;
    char label[33];
    bool has_use_passphrase;
    bool use_passphrase;
    bool has_homescreen;
    ApplySettings_homescreen_t homescreen;
    bool has_auto_lock_delay_ms;
    uint32_t auto_lock_delay_ms;
    bool has_display_rotation;
    uint32_t display_rotation;
    bool has_passphrase_always_on_device;
    bool passphrase_always_on_device;
    bool has_safety_checks;
    SafetyCheckLevel safety_checks;
    bool has_experimental_features;
    bool experimental_features;
    bool has_use_ble;
    bool use_ble;
    bool has_use_se;
    bool use_se;
    bool has_is_bixinapp;
    bool is_bixinapp;
    bool has_fastpay_pin;
    bool fastpay_pin;
    bool has_fastpay_confirm;
    bool fastpay_confirm;
    bool has_fastpay_money_limit;
    uint64_t fastpay_money_limit;
    bool has_fastpay_times;
    uint32_t fastpay_times;
} ApplySettings;

typedef PB_BYTES_ARRAY_T(512) BixinBackupAck_data_t;
typedef struct _BixinBackupAck {
    BixinBackupAck_data_t data;
} BixinBackupAck;

typedef struct _BixinBackupDeviceAck {
    char mnemonics[241];
} BixinBackupDeviceAck;

typedef struct _BixinLoadDevice {
    char mnemonics[241];
    bool has_language;
    char language[17];
    bool has_label;
    char label[33];
    bool has_skip_checksum;
    bool skip_checksum;
} BixinLoadDevice;

typedef PB_BYTES_ARRAY_T(1024) BixinMessageSE_inputmessage_t;
typedef struct _BixinMessageSE {
    BixinMessageSE_inputmessage_t inputmessage;
} BixinMessageSE;

typedef PB_BYTES_ARRAY_T(1024) BixinOutMessageSE_outmessage_t;
typedef struct _BixinOutMessageSE {
    bool has_outmessage;
    BixinOutMessageSE_outmessage_t outmessage;
} BixinOutMessageSE;

typedef PB_BYTES_ARRAY_T(512) BixinRestoreAck_data_t;
typedef struct _BixinRestoreAck {
    BixinRestoreAck_data_t data;
} BixinRestoreAck;

typedef PB_BYTES_ARRAY_T(512) BixinRestoreRequest_data_t;
typedef struct _BixinRestoreRequest {
    BixinRestoreRequest_data_t data;
    bool has_language;
    char language[17];
    bool has_label;
    char label[33];
    bool has_passphrase_protection;
    bool passphrase_protection;
} BixinRestoreRequest;

typedef PB_BYTES_ARRAY_T(512) BixinSeedOperate_seed_importData_t;
typedef struct _BixinSeedOperate {
    SeedRequestType type;
    bool has_seed_importData;
    BixinSeedOperate_seed_importData_t seed_importData;
} BixinSeedOperate;

typedef PB_BYTES_ARRAY_T(1024) BixinVerifyDeviceAck_cert_t;
typedef PB_BYTES_ARRAY_T(512) BixinVerifyDeviceAck_signature_t;
typedef struct _BixinVerifyDeviceAck {
    BixinVerifyDeviceAck_cert_t cert;
    BixinVerifyDeviceAck_signature_t signature;
} BixinVerifyDeviceAck;

typedef PB_BYTES_ARRAY_T(512) BixinVerifyDeviceRequest_data_t;
typedef struct _BixinVerifyDeviceRequest {
    BixinVerifyDeviceRequest_data_t data;
} BixinVerifyDeviceRequest;

typedef struct _BixinWhiteListAck {
    pb_size_t address_count;
    char address[10][130];
} BixinWhiteListAck;

typedef struct _BixinWhiteListRequest {
    WL_OperationType type;
    bool has_addr_in;
    char addr_in[130];
} BixinWhiteListRequest;

typedef struct _ChangePin {
    bool has_remove;
    bool remove;
} ChangePin;

typedef struct _ChangeWipeCode {
    bool has_remove;
    bool remove;
} ChangeWipeCode;

typedef PB_BYTES_ARRAY_T(1024) Entropy_entropy_t;
typedef struct _Entropy {
    Entropy_entropy_t entropy;
} Entropy;

typedef PB_BYTES_ARRAY_T(128) EntropyAck_entropy_t;
typedef struct _EntropyAck {
    bool has_entropy;
    EntropyAck_entropy_t entropy;
} EntropyAck;

typedef struct _FactorySet {
    char product[3];
    char hardware_id[3];
    char shell_color[2];
    char factory_id[3];
    char utc[11];
    char serial_no[8];
} FactorySet;

typedef struct _GetEntropy {
    uint32_t size;
} GetEntropy;

typedef PB_BYTES_ARRAY_T(32) Initialize_session_id_t;
typedef struct _Initialize {
    bool has_session_id;
    Initialize_session_id_t session_id;
} Initialize;

typedef struct _LoadDevice {
    pb_size_t mnemonics_count;
    char mnemonics[16][241];
    bool has_pin;
    char pin[10];
    bool has_passphrase_protection;
    bool passphrase_protection;
    bool has_language;
    char language[17];
    bool has_label;
    char label[33];
    bool has_skip_checksum;
    bool skip_checksum;
    bool has_u2f_counter;
    uint32_t u2f_counter;
    bool has_needs_backup;
    bool needs_backup;
    bool has_no_backup;
    bool no_backup;
} LoadDevice;

typedef struct _NextU2FCounter {
    bool has_u2f_counter;
    uint32_t u2f_counter;
} NextU2FCounter;

typedef struct _Ping {
    bool has_message;
    char message[256];
    bool has_button_protection;
    bool button_protection;
} Ping;

typedef struct _RecoveryDevice {
    bool has_word_count;
    uint32_t word_count;
    bool has_passphrase_protection;
    bool passphrase_protection;
    bool has_pin_protection;
    bool pin_protection;
    bool has_language;
    char language[17];
    bool has_label;
    char label[33];
    bool has_enforce_wordlist;
    bool enforce_wordlist;
    bool has_type;
    RecoveryDeviceType type;
    bool has_u2f_counter;
    uint32_t u2f_counter;
    bool has_dry_run;
    bool dry_run;
} RecoveryDevice;

typedef struct _ResetDevice {
    bool has_display_random;
    bool display_random;
    bool has_strength;
    uint32_t strength;
    bool has_passphrase_protection;
    bool passphrase_protection;
    bool has_pin_protection;
    bool pin_protection;
    bool has_language;
    char language[17];
    bool has_label;
    char label[33];
    bool has_u2f_counter;
    uint32_t u2f_counter;
    bool has_skip_backup;
    bool skip_backup;
    bool has_no_backup;
    bool no_backup;
    bool has_backup_type;
    BackupType backup_type;
} ResetDevice;

typedef PB_BYTES_ARRAY_T(64) SEMessageSignature_signature_t;
typedef struct _SEMessageSignature {
    SEMessageSignature_signature_t signature;
} SEMessageSignature;

typedef PB_BYTES_ARRAY_T(416) SEPublicCert_public_cert_t;
typedef struct _SEPublicCert {
    SEPublicCert_public_cert_t public_cert;
} SEPublicCert;

typedef PB_BYTES_ARRAY_T(64) SEPublicKey_public_key_t;
typedef struct _SEPublicKey {
    SEPublicKey_public_key_t public_key;
} SEPublicKey;

typedef PB_BYTES_ARRAY_T(1024) SESignMessage_message_t;
typedef struct _SESignMessage {
    SESignMessage_message_t message;
} SESignMessage;

typedef struct _SdProtect {
    bool has_operation;
    SdProtectOperationType operation;
} SdProtect;

typedef struct _SetU2FCounter {
    bool has_u2f_counter;
    uint32_t u2f_counter;
} SetU2FCounter;

typedef PB_BYTES_ARRAY_T(1024) SpiFlashData_data_t;
typedef struct _SpiFlashData {
    SpiFlashData_data_t data;
} SpiFlashData;

typedef struct _SpiFlashRead {
    uint32_t address;
    uint32_t len;
} SpiFlashRead;

typedef PB_BYTES_ARRAY_T(1024) SpiFlashWrite_data_t;
typedef struct _SpiFlashWrite {
    uint32_t address;
    SpiFlashWrite_data_t data;
} SpiFlashWrite;

typedef struct _WordAck {
    char word[12];
} WordAck;

typedef struct _WordRequest {
    bool has_type;
    WordRequestType type;
} WordRequest;

typedef PB_BYTES_ARRAY_T(416) WriteSEPublicCert_public_cert_t;
typedef struct _WriteSEPublicCert {
    WriteSEPublicCert_public_cert_t public_cert;
} WriteSEPublicCert;

typedef struct _DeviceInfo {
    FactorySet factory_info;
    bool has_spiFlash_info;
    char spiFlash_info[16];
    bool has_SE_info;
    char SE_info[16];
} DeviceInfo;

typedef struct _DeviceInfoSettings {
    FactorySet serial;
} DeviceInfoSettings;

typedef PB_BYTES_ARRAY_T(20) Features_revision_t;
typedef PB_BYTES_ARRAY_T(32) Features_bootloader_hash_t;
typedef PB_BYTES_ARRAY_T(32) Features_fw_vendor_keys_t;
typedef PB_BYTES_ARRAY_T(32) Features_session_id_t;
typedef struct _Features {
    bool has_vendor;
    char vendor[33];
    bool has_major_version;
    uint32_t major_version;
    bool has_minor_version;
    uint32_t minor_version;
    bool has_patch_version;
    uint32_t patch_version;
    bool has_bootloader_mode;
    bool bootloader_mode;
    bool has_device_id;
    char device_id[25];
    bool has_pin_protection;
    bool pin_protection;
    bool has_passphrase_protection;
    bool passphrase_protection;
    bool has_language;
    char language[17];
    bool has_label;
    char label[33];
    bool has_initialized;
    bool initialized;
    bool has_revision;
    Features_revision_t revision;
    bool has_bootloader_hash;
    Features_bootloader_hash_t bootloader_hash;
    bool has_imported;
    bool imported;
    bool has_unlocked;
    bool unlocked;
    bool has_firmware_present;
    bool firmware_present;
    bool has_needs_backup;
    bool needs_backup;
    bool has_flags;
    uint32_t flags;
    bool has_model;
    char model[17];
    bool has_fw_major;
    uint32_t fw_major;
    bool has_fw_minor;
    uint32_t fw_minor;
    bool has_fw_patch;
    uint32_t fw_patch;
    bool has_fw_vendor;
    char fw_vendor[256];
    bool has_fw_vendor_keys;
    Features_fw_vendor_keys_t fw_vendor_keys;
    bool has_unfinished_backup;
    bool unfinished_backup;
    bool has_no_backup;
    bool no_backup;
    bool has_recovery_mode;
    bool recovery_mode;
    pb_size_t capabilities_count;
    Capability capabilities[32];
    bool has_backup_type;
    BackupType backup_type;
    bool has_sd_card_present;
    bool sd_card_present;
    bool has_sd_protection;
    bool sd_protection;
    bool has_wipe_code_protection;
    bool wipe_code_protection;
    bool has_session_id;
    Features_session_id_t session_id;
    bool has_passphrase_always_on_device;
    bool passphrase_always_on_device;
    bool has_safety_checks;
    SafetyCheckLevel safety_checks;
    bool has_auto_lock_delay_ms;
    uint32_t auto_lock_delay_ms;
    bool has_display_rotation;
    uint32_t display_rotation;
    bool has_experimental_features;
    bool experimental_features;
    bool has_offset;
    uint32_t offset;
    bool has_ble_name;
    char ble_name[32];
    bool has_ble_ver;
    char ble_ver[16];
    bool has_ble_enable;
    bool ble_enable;
    bool has_se_enable;
    bool se_enable;
    bool has_se_ver;
    char se_ver[16];
    bool has_backup_only;
    bool backup_only;
    bool has_onekey_version;
    char onekey_version[16];
    bool has_onekey_serial;
    char onekey_serial[32];
    bool has_bootloader_version;
    char bootloader_version[8];
    bool has_factory_info;
    FactorySet factory_info;
    bool has_spi_flash;
    char spi_flash[17];
} Features;


/* Helper constants for enums */
#define _BackupType_MIN BackupType_Bip39
#define _BackupType_MAX BackupType_Slip39_Advanced
#define _BackupType_ARRAYSIZE ((BackupType)(BackupType_Slip39_Advanced+1))

#define _SafetyCheckLevel_MIN SafetyCheckLevel_Strict
#define _SafetyCheckLevel_MAX SafetyCheckLevel_PromptTemporarily
#define _SafetyCheckLevel_ARRAYSIZE ((SafetyCheckLevel)(SafetyCheckLevel_PromptTemporarily+1))

#define _Capability_MIN Capability_Capability_Bitcoin
#define _Capability_MAX Capability_Capability_PassphraseEntry
#define _Capability_ARRAYSIZE ((Capability)(Capability_Capability_PassphraseEntry+1))

#define _ExportType_MIN ExportType_SeedEncExportType_NO
#define _ExportType_MAX ExportType_MnemonicPlainExportType_YES
#define _ExportType_ARRAYSIZE ((ExportType)(ExportType_MnemonicPlainExportType_YES+1))

#define _SdProtectOperationType_MIN SdProtectOperationType_DISABLE
#define _SdProtectOperationType_MAX SdProtectOperationType_REFRESH
#define _SdProtectOperationType_ARRAYSIZE ((SdProtectOperationType)(SdProtectOperationType_REFRESH+1))

#define _RecoveryDeviceType_MIN RecoveryDeviceType_RecoveryDeviceType_ScrambledWords
#define _RecoveryDeviceType_MAX RecoveryDeviceType_RecoveryDeviceType_Matrix
#define _RecoveryDeviceType_ARRAYSIZE ((RecoveryDeviceType)(RecoveryDeviceType_RecoveryDeviceType_Matrix+1))

#define _WordRequestType_MIN WordRequestType_WordRequestType_Plain
#define _WordRequestType_MAX WordRequestType_WordRequestType_Matrix6
#define _WordRequestType_ARRAYSIZE ((WordRequestType)(WordRequestType_WordRequestType_Matrix6+1))

#define _SeedRequestType_MIN SeedRequestType_SeedRequestType_Gen
#define _SeedRequestType_MAX SeedRequestType_SeedRequestType_EncImport
#define _SeedRequestType_ARRAYSIZE ((SeedRequestType)(SeedRequestType_SeedRequestType_EncImport+1))

#define _WL_OperationType_MIN WL_OperationType_WL_OperationType_Add
#define _WL_OperationType_MAX WL_OperationType_WL_OperationType_Inquire
#define _WL_OperationType_ARRAYSIZE ((WL_OperationType)(WL_OperationType_WL_OperationType_Inquire+1))


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define Initialize_init_default                  {false, {0, {0}}}
#define GetFeatures_init_default                 {0}
#define Features_init_default                    {false, "", false, 0, false, 0, false, 0, false, 0, false, "", false, 0, false, 0, false, "", false, "", false, 0, false, {0, {0}}, false, {0, {0}}, false, 0, false, 0, false, 0, false, 0, false, 0, false, "", false, 0, false, 0, false, 0, false, "", false, {0, {0}}, false, 0, false, 0, false, 0, 0, {_Capability_MIN, _Capability_MIN, _Capability_MIN, _Capability_MIN, _Capability_MIN, _Capability_MIN, _Capability_MIN, _Capability_MIN, _Capability_MIN, _Capability_MIN, _Capability_MIN, _Capability_MIN, _Capability_MIN, _Capability_MIN, _Capability_MIN, _Capability_MIN, _Capability_MIN, _Capability_MIN, _Capability_MIN, _Capability_MIN, _Capability_MIN, _Capability_MIN, _Capability_MIN, _Capability_MIN, _Capability_MIN, _Capability_MIN, _Capability_MIN, _Capability_MIN, _Capability_MIN, _Capability_MIN, _Capability_MIN, _Capability_MIN}, false, _BackupType_MIN, false, 0, false, 0, false, 0, false, {0, {0}}, false, 0, false, _SafetyCheckLevel_MIN, false, 0, false, 0, false, 0, false, 0, false, "", false, "", false, 0, false, 0, false, "", false, 0, false, "", false, "", false, "", false, FactorySet_init_default, false, ""}
#define LockDevice_init_default                  {0}
#define EndSession_init_default                  {0}
#define ApplySettings_init_default               {false, "", false, "", false, 0, false, {0, {0}}, false, 0, false, 0, false, 0, false, _SafetyCheckLevel_MIN, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define ApplyFlags_init_default                  {false, 0}
#define ChangePin_init_default                   {false, 0}
#define ChangeWipeCode_init_default              {false, 0}
#define SdProtect_init_default                   {false, _SdProtectOperationType_MIN}
#define Ping_init_default                        {false, "", false, 0}
#define Cancel_init_default                      {0}
#define GetEntropy_init_default                  {0}
#define Entropy_init_default                     {{0, {0}}}
#define WipeDevice_init_default                  {0}
#define LoadDevice_init_default                  {0, {"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""}, false, "", false, 0, false, "en-US", false, "", false, 0, false, 0, false, 0, false, 0}
#define ResetDevice_init_default                 {false, 0, false, 256u, false, 0, false, 0, false, "en-US", false, "", false, 0, false, 0, false, 0, false, BackupType_Bip39}
#define BackupDevice_init_default                {0}
#define EntropyRequest_init_default              {0}
#define EntropyAck_init_default                  {false, {0, {0}}}
#define RecoveryDevice_init_default              {false, 0, false, 0, false, 0, false, "", false, "", false, 0, false, _RecoveryDeviceType_MIN, false, 0, false, 0}
#define WordRequest_init_default                 {false, _WordRequestType_MIN}
#define WordAck_init_default                     {""}
#define SetU2FCounter_init_default               {false, 0}
#define GetNextU2FCounter_init_default           {0}
#define NextU2FCounter_init_default              {false, 0}
#define DoPreauthorized_init_default             {0}
#define PreauthorizedRequest_init_default        {0}
#define CancelAuthorization_init_default         {0}
#define BixinSeedOperate_init_default            {_SeedRequestType_MIN, false, {0, {0}}}
#define BixinMessageSE_init_default              {{0, {0}}}
#define BixinOutMessageSE_init_default           {false, {0, {0}}}
#define BixinReboot_init_default                 {0}
#define BixinBackupRequest_init_default          {0}
#define BixinBackupAck_init_default              {{0, {0}}}
#define BixinRestoreRequest_init_default         {{0, {0}}, false, "", false, "", false, 0}
#define BixinRestoreAck_init_default             {{0, {0}}}
#define BixinVerifyDeviceRequest_init_default    {{0, {0}}}
#define BixinVerifyDeviceAck_init_default        {{0, {0}}, {0, {0}}}
#define BixinWhiteListRequest_init_default       {_WL_OperationType_MIN, false, ""}
#define BixinWhiteListAck_init_default           {0, {"", "", "", "", "", "", "", "", "", ""}}
#define BixinLoadDevice_init_default             {"", false, "en-US", false, "", false, 0}
#define BixinBackupDevice_init_default           {0}
#define BixinBackupDeviceAck_init_default        {""}
#define FactorySet_init_default                  {"", "", "", "", "", ""}
#define DeviceInfoSettings_init_default          {FactorySet_init_default}
#define GetDeviceInfo_init_default               {0}
#define DeviceInfo_init_default                  {FactorySet_init_default, false, "", false, ""}
#define ReadSEPublicKey_init_default             {0}
#define SEPublicKey_init_default                 {{0, {0}}}
#define WriteSEPublicCert_init_default           {{0, {0}}}
#define ReadSEPublicCert_init_default            {0}
#define SEPublicCert_init_default                {{0, {0}}}
#define SpiFlashWrite_init_default               {0, {0, {0}}}
#define SpiFlashRead_init_default                {0, 0}
#define SpiFlashData_init_default                {{0, {0}}}
#define SESignMessage_init_default               {{0, {0}}}
#define SEMessageSignature_init_default          {{0, {0}}}
#define Initialize_init_zero                     {false, {0, {0}}}
#define GetFeatures_init_zero                    {0}
#define Features_init_zero                       {false, "", false, 0, false, 0, false, 0, false, 0, false, "", false, 0, false, 0, false, "", false, "", false, 0, false, {0, {0}}, false, {0, {0}}, false, 0, false, 0, false, 0, false, 0, false, 0, false, "", false, 0, false, 0, false, 0, false, "", false, {0, {0}}, false, 0, false, 0, false, 0, 0, {_Capability_MIN, _Capability_MIN, _Capability_MIN, _Capability_MIN, _Capability_MIN, _Capability_MIN, _Capability_MIN, _Capability_MIN, _Capability_MIN, _Capability_MIN, _Capability_MIN, _Capability_MIN, _Capability_MIN, _Capability_MIN, _Capability_MIN, _Capability_MIN, _Capability_MIN, _Capability_MIN, _Capability_MIN, _Capability_MIN, _Capability_MIN, _Capability_MIN, _Capability_MIN, _Capability_MIN, _Capability_MIN, _Capability_MIN, _Capability_MIN, _Capability_MIN, _Capability_MIN, _Capability_MIN, _Capability_MIN, _Capability_MIN}, false, _BackupType_MIN, false, 0, false, 0, false, 0, false, {0, {0}}, false, 0, false, _SafetyCheckLevel_MIN, false, 0, false, 0, false, 0, false, 0, false, "", false, "", false, 0, false, 0, false, "", false, 0, false, "", false, "", false, "", false, FactorySet_init_zero, false, ""}
#define LockDevice_init_zero                     {0}
#define EndSession_init_zero                     {0}
#define ApplySettings_init_zero                  {false, "", false, "", false, 0, false, {0, {0}}, false, 0, false, 0, false, 0, false, _SafetyCheckLevel_MIN, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define ApplyFlags_init_zero                     {false, 0}
#define ChangePin_init_zero                      {false, 0}
#define ChangeWipeCode_init_zero                 {false, 0}
#define SdProtect_init_zero                      {false, _SdProtectOperationType_MIN}
#define Ping_init_zero                           {false, "", false, 0}
#define Cancel_init_zero                         {0}
#define GetEntropy_init_zero                     {0}
#define Entropy_init_zero                        {{0, {0}}}
#define WipeDevice_init_zero                     {0}
#define LoadDevice_init_zero                     {0, {"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""}, false, "", false, 0, false, "", false, "", false, 0, false, 0, false, 0, false, 0}
#define ResetDevice_init_zero                    {false, 0, false, 0, false, 0, false, 0, false, "", false, "", false, 0, false, 0, false, 0, false, _BackupType_MIN}
#define BackupDevice_init_zero                   {0}
#define EntropyRequest_init_zero                 {0}
#define EntropyAck_init_zero                     {false, {0, {0}}}
#define RecoveryDevice_init_zero                 {false, 0, false, 0, false, 0, false, "", false, "", false, 0, false, _RecoveryDeviceType_MIN, false, 0, false, 0}
#define WordRequest_init_zero                    {false, _WordRequestType_MIN}
#define WordAck_init_zero                        {""}
#define SetU2FCounter_init_zero                  {false, 0}
#define GetNextU2FCounter_init_zero              {0}
#define NextU2FCounter_init_zero                 {false, 0}
#define DoPreauthorized_init_zero                {0}
#define PreauthorizedRequest_init_zero           {0}
#define CancelAuthorization_init_zero            {0}
#define BixinSeedOperate_init_zero               {_SeedRequestType_MIN, false, {0, {0}}}
#define BixinMessageSE_init_zero                 {{0, {0}}}
#define BixinOutMessageSE_init_zero              {false, {0, {0}}}
#define BixinReboot_init_zero                    {0}
#define BixinBackupRequest_init_zero             {0}
#define BixinBackupAck_init_zero                 {{0, {0}}}
#define BixinRestoreRequest_init_zero            {{0, {0}}, false, "", false, "", false, 0}
#define BixinRestoreAck_init_zero                {{0, {0}}}
#define BixinVerifyDeviceRequest_init_zero       {{0, {0}}}
#define BixinVerifyDeviceAck_init_zero           {{0, {0}}, {0, {0}}}
#define BixinWhiteListRequest_init_zero          {_WL_OperationType_MIN, false, ""}
#define BixinWhiteListAck_init_zero              {0, {"", "", "", "", "", "", "", "", "", ""}}
#define BixinLoadDevice_init_zero                {"", false, "", false, "", false, 0}
#define BixinBackupDevice_init_zero              {0}
#define BixinBackupDeviceAck_init_zero           {""}
#define FactorySet_init_zero                     {"", "", "", "", "", ""}
#define DeviceInfoSettings_init_zero             {FactorySet_init_zero}
#define GetDeviceInfo_init_zero                  {0}
#define DeviceInfo_init_zero                     {FactorySet_init_zero, false, "", false, ""}
#define ReadSEPublicKey_init_zero                {0}
#define SEPublicKey_init_zero                    {{0, {0}}}
#define WriteSEPublicCert_init_zero              {{0, {0}}}
#define ReadSEPublicCert_init_zero               {0}
#define SEPublicCert_init_zero                   {{0, {0}}}
#define SpiFlashWrite_init_zero                  {0, {0, {0}}}
#define SpiFlashRead_init_zero                   {0, 0}
#define SpiFlashData_init_zero                   {{0, {0}}}
#define SESignMessage_init_zero                  {{0, {0}}}
#define SEMessageSignature_init_zero             {{0, {0}}}

/* Field tags (for use in manual encoding/decoding) */
#define ApplyFlags_flags_tag                     1
#define ApplySettings_language_tag               1
#define ApplySettings_label_tag                  2
#define ApplySettings_use_passphrase_tag         3
#define ApplySettings_homescreen_tag             4
#define ApplySettings_auto_lock_delay_ms_tag     6
#define ApplySettings_display_rotation_tag       7
#define ApplySettings_passphrase_always_on_device_tag 8
#define ApplySettings_safety_checks_tag          9
#define ApplySettings_experimental_features_tag  10
#define ApplySettings_use_ble_tag                100
#define ApplySettings_use_se_tag                 101
#define ApplySettings_is_bixinapp_tag            102
#define ApplySettings_fastpay_pin_tag            103
#define ApplySettings_fastpay_confirm_tag        104
#define ApplySettings_fastpay_money_limit_tag    105
#define ApplySettings_fastpay_times_tag          106
#define BixinBackupAck_data_tag                  1
#define BixinBackupDeviceAck_mnemonics_tag       1
#define BixinLoadDevice_mnemonics_tag            1
#define BixinLoadDevice_language_tag             5
#define BixinLoadDevice_label_tag                6
#define BixinLoadDevice_skip_checksum_tag        7
#define BixinMessageSE_inputmessage_tag          1
#define BixinOutMessageSE_outmessage_tag         1
#define BixinRestoreAck_data_tag                 1
#define BixinRestoreRequest_data_tag             1
#define BixinRestoreRequest_language_tag         2
#define BixinRestoreRequest_label_tag            3
#define BixinRestoreRequest_passphrase_protection_tag 4
#define BixinSeedOperate_type_tag                1
#define BixinSeedOperate_seed_importData_tag     2
#define BixinVerifyDeviceAck_cert_tag            1
#define BixinVerifyDeviceAck_signature_tag       2
#define BixinVerifyDeviceRequest_data_tag        1
#define BixinWhiteListAck_address_tag            1
#define BixinWhiteListRequest_type_tag           1
#define BixinWhiteListRequest_addr_in_tag        2
#define ChangePin_remove_tag                     1
#define ChangeWipeCode_remove_tag                1
#define Entropy_entropy_tag                      1
#define EntropyAck_entropy_tag                   1
#define FactorySet_product_tag                   1
#define FactorySet_hardware_id_tag               2
#define FactorySet_shell_color_tag               3
#define FactorySet_factory_id_tag                4
#define FactorySet_utc_tag                       5
#define FactorySet_serial_no_tag                 6
#define GetEntropy_size_tag                      1
#define Initialize_session_id_tag                1
#define LoadDevice_mnemonics_tag                 1
#define LoadDevice_pin_tag                       3
#define LoadDevice_passphrase_protection_tag     4
#define LoadDevice_language_tag                  5
#define LoadDevice_label_tag                     6
#define LoadDevice_skip_checksum_tag             7
#define LoadDevice_u2f_counter_tag               8
#define LoadDevice_needs_backup_tag              9
#define LoadDevice_no_backup_tag                 10
#define NextU2FCounter_u2f_counter_tag           1
#define Ping_message_tag                         1
#define Ping_button_protection_tag               2
#define RecoveryDevice_word_count_tag            1
#define RecoveryDevice_passphrase_protection_tag 2
#define RecoveryDevice_pin_protection_tag        3
#define RecoveryDevice_language_tag              4
#define RecoveryDevice_label_tag                 5
#define RecoveryDevice_enforce_wordlist_tag      6
#define RecoveryDevice_type_tag                  8
#define RecoveryDevice_u2f_counter_tag           9
#define RecoveryDevice_dry_run_tag               10
#define ResetDevice_display_random_tag           1
#define ResetDevice_strength_tag                 2
#define ResetDevice_passphrase_protection_tag    3
#define ResetDevice_pin_protection_tag           4
#define ResetDevice_language_tag                 5
#define ResetDevice_label_tag                    6
#define ResetDevice_u2f_counter_tag              7
#define ResetDevice_skip_backup_tag              8
#define ResetDevice_no_backup_tag                9
#define ResetDevice_backup_type_tag              10
#define SEMessageSignature_signature_tag         1
#define SEPublicCert_public_cert_tag             1
#define SEPublicKey_public_key_tag               1
#define SESignMessage_message_tag                1
#define SdProtect_operation_tag                  1
#define SetU2FCounter_u2f_counter_tag            1
#define SpiFlashData_data_tag                    1
#define SpiFlashRead_address_tag                 1
#define SpiFlashRead_len_tag                     2
#define SpiFlashWrite_address_tag                1
#define SpiFlashWrite_data_tag                   2
#define WordAck_word_tag                         1
#define WordRequest_type_tag                     1
#define WriteSEPublicCert_public_cert_tag        1
#define DeviceInfo_factory_info_tag              1
#define DeviceInfo_spiFlash_info_tag             2
#define DeviceInfo_SE_info_tag                   3
#define DeviceInfoSettings_serial_tag            1
#define Features_vendor_tag                      1
#define Features_major_version_tag               2
#define Features_minor_version_tag               3
#define Features_patch_version_tag               4
#define Features_bootloader_mode_tag             5
#define Features_device_id_tag                   6
#define Features_pin_protection_tag              7
#define Features_passphrase_protection_tag       8
#define Features_language_tag                    9
#define Features_label_tag                       10
#define Features_initialized_tag                 12
#define Features_revision_tag                    13
#define Features_bootloader_hash_tag             14
#define Features_imported_tag                    15
#define Features_unlocked_tag                    16
#define Features_firmware_present_tag            18
#define Features_needs_backup_tag                19
#define Features_flags_tag                       20
#define Features_model_tag                       21
#define Features_fw_major_tag                    22
#define Features_fw_minor_tag                    23
#define Features_fw_patch_tag                    24
#define Features_fw_vendor_tag                   25
#define Features_fw_vendor_keys_tag              26
#define Features_unfinished_backup_tag           27
#define Features_no_backup_tag                   28
#define Features_recovery_mode_tag               29
#define Features_capabilities_tag                30
#define Features_backup_type_tag                 31
#define Features_sd_card_present_tag             32
#define Features_sd_protection_tag               33
#define Features_wipe_code_protection_tag        34
#define Features_session_id_tag                  35
#define Features_passphrase_always_on_device_tag 36
#define Features_safety_checks_tag               37
#define Features_auto_lock_delay_ms_tag          38
#define Features_display_rotation_tag            39
#define Features_experimental_features_tag       40
#define Features_offset_tag                      500
#define Features_ble_name_tag                    501
#define Features_ble_ver_tag                     502
#define Features_ble_enable_tag                  503
#define Features_se_enable_tag                   504
#define Features_se_ver_tag                      506
#define Features_backup_only_tag                 507
#define Features_onekey_version_tag              508
#define Features_onekey_serial_tag               509
#define Features_bootloader_version_tag          510
#define Features_factory_info_tag                511
#define Features_spi_flash_tag                   512

/* Struct field encoding specification for nanopb */
#define Initialize_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, BYTES,    session_id,        1)
#define Initialize_CALLBACK NULL
#define Initialize_DEFAULT NULL

#define GetFeatures_FIELDLIST(X, a) \

#define GetFeatures_CALLBACK NULL
#define GetFeatures_DEFAULT NULL

#define Features_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, STRING,   vendor,            1) \
X(a, STATIC,   OPTIONAL, UINT32,   major_version,     2) \
X(a, STATIC,   OPTIONAL, UINT32,   minor_version,     3) \
X(a, STATIC,   OPTIONAL, UINT32,   patch_version,     4) \
X(a, STATIC,   OPTIONAL, BOOL,     bootloader_mode,   5) \
X(a, STATIC,   OPTIONAL, STRING,   device_id,         6) \
X(a, STATIC,   OPTIONAL, BOOL,     pin_protection,    7) \
X(a, STATIC,   OPTIONAL, BOOL,     passphrase_protection,   8) \
X(a, STATIC,   OPTIONAL, STRING,   language,          9) \
X(a, STATIC,   OPTIONAL, STRING,   label,            10) \
X(a, STATIC,   OPTIONAL, BOOL,     initialized,      12) \
X(a, STATIC,   OPTIONAL, BYTES,    revision,         13) \
X(a, STATIC,   OPTIONAL, BYTES,    bootloader_hash,  14) \
X(a, STATIC,   OPTIONAL, BOOL,     imported,         15) \
X(a, STATIC,   OPTIONAL, BOOL,     unlocked,         16) \
X(a, STATIC,   OPTIONAL, BOOL,     firmware_present,  18) \
X(a, STATIC,   OPTIONAL, BOOL,     needs_backup,     19) \
X(a, STATIC,   OPTIONAL, UINT32,   flags,            20) \
X(a, STATIC,   OPTIONAL, STRING,   model,            21) \
X(a, STATIC,   OPTIONAL, UINT32,   fw_major,         22) \
X(a, STATIC,   OPTIONAL, UINT32,   fw_minor,         23) \
X(a, STATIC,   OPTIONAL, UINT32,   fw_patch,         24) \
X(a, STATIC,   OPTIONAL, STRING,   fw_vendor,        25) \
X(a, STATIC,   OPTIONAL, BYTES,    fw_vendor_keys,   26) \
X(a, STATIC,   OPTIONAL, BOOL,     unfinished_backup,  27) \
X(a, STATIC,   OPTIONAL, BOOL,     no_backup,        28) \
X(a, STATIC,   OPTIONAL, BOOL,     recovery_mode,    29) \
X(a, STATIC,   REPEATED, UENUM,    capabilities,     30) \
X(a, STATIC,   OPTIONAL, UENUM,    backup_type,      31) \
X(a, STATIC,   OPTIONAL, BOOL,     sd_card_present,  32) \
X(a, STATIC,   OPTIONAL, BOOL,     sd_protection,    33) \
X(a, STATIC,   OPTIONAL, BOOL,     wipe_code_protection,  34) \
X(a, STATIC,   OPTIONAL, BYTES,    session_id,       35) \
X(a, STATIC,   OPTIONAL, BOOL,     passphrase_always_on_device,  36) \
X(a, STATIC,   OPTIONAL, UENUM,    safety_checks,    37) \
X(a, STATIC,   OPTIONAL, UINT32,   auto_lock_delay_ms,  38) \
X(a, STATIC,   OPTIONAL, UINT32,   display_rotation,  39) \
X(a, STATIC,   OPTIONAL, BOOL,     experimental_features,  40) \
X(a, STATIC,   OPTIONAL, UINT32,   offset,          500) \
X(a, STATIC,   OPTIONAL, STRING,   ble_name,        501) \
X(a, STATIC,   OPTIONAL, STRING,   ble_ver,         502) \
X(a, STATIC,   OPTIONAL, BOOL,     ble_enable,      503) \
X(a, STATIC,   OPTIONAL, BOOL,     se_enable,       504) \
X(a, STATIC,   OPTIONAL, STRING,   se_ver,          506) \
X(a, STATIC,   OPTIONAL, BOOL,     backup_only,     507) \
X(a, STATIC,   OPTIONAL, STRING,   onekey_version,  508) \
X(a, STATIC,   OPTIONAL, STRING,   onekey_serial,   509) \
X(a, STATIC,   OPTIONAL, STRING,   bootloader_version, 510) \
X(a, STATIC,   OPTIONAL, MESSAGE,  factory_info,    511) \
X(a, STATIC,   OPTIONAL, STRING,   spi_flash,       512)
#define Features_CALLBACK NULL
#define Features_DEFAULT NULL
#define Features_factory_info_MSGTYPE FactorySet

#define LockDevice_FIELDLIST(X, a) \

#define LockDevice_CALLBACK NULL
#define LockDevice_DEFAULT NULL

#define EndSession_FIELDLIST(X, a) \

#define EndSession_CALLBACK NULL
#define EndSession_DEFAULT NULL

#define ApplySettings_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, STRING,   language,          1) \
X(a, STATIC,   OPTIONAL, STRING,   label,             2) \
X(a, STATIC,   OPTIONAL, BOOL,     use_passphrase,    3) \
X(a, STATIC,   OPTIONAL, BYTES,    homescreen,        4) \
X(a, STATIC,   OPTIONAL, UINT32,   auto_lock_delay_ms,   6) \
X(a, STATIC,   OPTIONAL, UINT32,   display_rotation,   7) \
X(a, STATIC,   OPTIONAL, BOOL,     passphrase_always_on_device,   8) \
X(a, STATIC,   OPTIONAL, UENUM,    safety_checks,     9) \
X(a, STATIC,   OPTIONAL, BOOL,     experimental_features,  10) \
X(a, STATIC,   OPTIONAL, BOOL,     use_ble,         100) \
X(a, STATIC,   OPTIONAL, BOOL,     use_se,          101) \
X(a, STATIC,   OPTIONAL, BOOL,     is_bixinapp,     102) \
X(a, STATIC,   OPTIONAL, BOOL,     fastpay_pin,     103) \
X(a, STATIC,   OPTIONAL, BOOL,     fastpay_confirm, 104) \
X(a, STATIC,   OPTIONAL, UINT64,   fastpay_money_limit, 105) \
X(a, STATIC,   OPTIONAL, UINT32,   fastpay_times,   106)
#define ApplySettings_CALLBACK NULL
#define ApplySettings_DEFAULT NULL

#define ApplyFlags_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   flags,             1)
#define ApplyFlags_CALLBACK NULL
#define ApplyFlags_DEFAULT NULL

#define ChangePin_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, BOOL,     remove,            1)
#define ChangePin_CALLBACK NULL
#define ChangePin_DEFAULT NULL

#define ChangeWipeCode_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, BOOL,     remove,            1)
#define ChangeWipeCode_CALLBACK NULL
#define ChangeWipeCode_DEFAULT NULL

#define SdProtect_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UENUM,    operation,         1)
#define SdProtect_CALLBACK NULL
#define SdProtect_DEFAULT NULL

#define Ping_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, STRING,   message,           1) \
X(a, STATIC,   OPTIONAL, BOOL,     button_protection,   2)
#define Ping_CALLBACK NULL
#define Ping_DEFAULT NULL

#define Cancel_FIELDLIST(X, a) \

#define Cancel_CALLBACK NULL
#define Cancel_DEFAULT NULL

#define GetEntropy_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, UINT32,   size,              1)
#define GetEntropy_CALLBACK NULL
#define GetEntropy_DEFAULT NULL

#define Entropy_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, BYTES,    entropy,           1)
#define Entropy_CALLBACK NULL
#define Entropy_DEFAULT NULL

#define WipeDevice_FIELDLIST(X, a) \

#define WipeDevice_CALLBACK NULL
#define WipeDevice_DEFAULT NULL

#define LoadDevice_FIELDLIST(X, a) \
X(a, STATIC,   REPEATED, STRING,   mnemonics,         1) \
X(a, STATIC,   OPTIONAL, STRING,   pin,               3) \
X(a, STATIC,   OPTIONAL, BOOL,     passphrase_protection,   4) \
X(a, STATIC,   OPTIONAL, STRING,   language,          5) \
X(a, STATIC,   OPTIONAL, STRING,   label,             6) \
X(a, STATIC,   OPTIONAL, BOOL,     skip_checksum,     7) \
X(a, STATIC,   OPTIONAL, UINT32,   u2f_counter,       8) \
X(a, STATIC,   OPTIONAL, BOOL,     needs_backup,      9) \
X(a, STATIC,   OPTIONAL, BOOL,     no_backup,        10)
#define LoadDevice_CALLBACK NULL
#define LoadDevice_DEFAULT (const pb_byte_t*)"\x2a\x05\x65\x6e\x2d\x55\x53\x00"

#define ResetDevice_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, BOOL,     display_random,    1) \
X(a, STATIC,   OPTIONAL, UINT32,   strength,          2) \
X(a, STATIC,   OPTIONAL, BOOL,     passphrase_protection,   3) \
X(a, STATIC,   OPTIONAL, BOOL,     pin_protection,    4) \
X(a, STATIC,   OPTIONAL, STRING,   language,          5) \
X(a, STATIC,   OPTIONAL, STRING,   label,             6) \
X(a, STATIC,   OPTIONAL, UINT32,   u2f_counter,       7) \
X(a, STATIC,   OPTIONAL, BOOL,     skip_backup,       8) \
X(a, STATIC,   OPTIONAL, BOOL,     no_backup,         9) \
X(a, STATIC,   OPTIONAL, UENUM,    backup_type,      10)
#define ResetDevice_CALLBACK NULL
#define ResetDevice_DEFAULT (const pb_byte_t*)"\x10\x80\x02\x2a\x05\x65\x6e\x2d\x55\x53\x00"

#define BackupDevice_FIELDLIST(X, a) \

#define BackupDevice_CALLBACK NULL
#define BackupDevice_DEFAULT NULL

#define EntropyRequest_FIELDLIST(X, a) \

#define EntropyRequest_CALLBACK NULL
#define EntropyRequest_DEFAULT NULL

#define EntropyAck_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, BYTES,    entropy,           1)
#define EntropyAck_CALLBACK NULL
#define EntropyAck_DEFAULT NULL

#define RecoveryDevice_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   word_count,        1) \
X(a, STATIC,   OPTIONAL, BOOL,     passphrase_protection,   2) \
X(a, STATIC,   OPTIONAL, BOOL,     pin_protection,    3) \
X(a, STATIC,   OPTIONAL, STRING,   language,          4) \
X(a, STATIC,   OPTIONAL, STRING,   label,             5) \
X(a, STATIC,   OPTIONAL, BOOL,     enforce_wordlist,   6) \
X(a, STATIC,   OPTIONAL, UENUM,    type,              8) \
X(a, STATIC,   OPTIONAL, UINT32,   u2f_counter,       9) \
X(a, STATIC,   OPTIONAL, BOOL,     dry_run,          10)
#define RecoveryDevice_CALLBACK NULL
#define RecoveryDevice_DEFAULT NULL

#define WordRequest_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UENUM,    type,              1)
#define WordRequest_CALLBACK NULL
#define WordRequest_DEFAULT NULL

#define WordAck_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, STRING,   word,              1)
#define WordAck_CALLBACK NULL
#define WordAck_DEFAULT NULL

#define SetU2FCounter_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   u2f_counter,       1)
#define SetU2FCounter_CALLBACK NULL
#define SetU2FCounter_DEFAULT NULL

#define GetNextU2FCounter_FIELDLIST(X, a) \

#define GetNextU2FCounter_CALLBACK NULL
#define GetNextU2FCounter_DEFAULT NULL

#define NextU2FCounter_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   u2f_counter,       1)
#define NextU2FCounter_CALLBACK NULL
#define NextU2FCounter_DEFAULT NULL

#define DoPreauthorized_FIELDLIST(X, a) \

#define DoPreauthorized_CALLBACK NULL
#define DoPreauthorized_DEFAULT NULL

#define PreauthorizedRequest_FIELDLIST(X, a) \

#define PreauthorizedRequest_CALLBACK NULL
#define PreauthorizedRequest_DEFAULT NULL

#define CancelAuthorization_FIELDLIST(X, a) \

#define CancelAuthorization_CALLBACK NULL
#define CancelAuthorization_DEFAULT NULL

#define BixinSeedOperate_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, UENUM,    type,              1) \
X(a, STATIC,   OPTIONAL, BYTES,    seed_importData,   2)
#define BixinSeedOperate_CALLBACK NULL
#define BixinSeedOperate_DEFAULT NULL

#define BixinMessageSE_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, BYTES,    inputmessage,      1)
#define BixinMessageSE_CALLBACK NULL
#define BixinMessageSE_DEFAULT NULL

#define BixinOutMessageSE_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, BYTES,    outmessage,        1)
#define BixinOutMessageSE_CALLBACK NULL
#define BixinOutMessageSE_DEFAULT NULL

#define BixinReboot_FIELDLIST(X, a) \

#define BixinReboot_CALLBACK NULL
#define BixinReboot_DEFAULT NULL

#define BixinBackupRequest_FIELDLIST(X, a) \

#define BixinBackupRequest_CALLBACK NULL
#define BixinBackupRequest_DEFAULT NULL

#define BixinBackupAck_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, BYTES,    data,              1)
#define BixinBackupAck_CALLBACK NULL
#define BixinBackupAck_DEFAULT NULL

#define BixinRestoreRequest_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, BYTES,    data,              1) \
X(a, STATIC,   OPTIONAL, STRING,   language,          2) \
X(a, STATIC,   OPTIONAL, STRING,   label,             3) \
X(a, STATIC,   OPTIONAL, BOOL,     passphrase_protection,   4)
#define BixinRestoreRequest_CALLBACK NULL
#define BixinRestoreRequest_DEFAULT NULL

#define BixinRestoreAck_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, BYTES,    data,              1)
#define BixinRestoreAck_CALLBACK NULL
#define BixinRestoreAck_DEFAULT NULL

#define BixinVerifyDeviceRequest_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, BYTES,    data,              1)
#define BixinVerifyDeviceRequest_CALLBACK NULL
#define BixinVerifyDeviceRequest_DEFAULT NULL

#define BixinVerifyDeviceAck_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, BYTES,    cert,              1) \
X(a, STATIC,   REQUIRED, BYTES,    signature,         2)
#define BixinVerifyDeviceAck_CALLBACK NULL
#define BixinVerifyDeviceAck_DEFAULT NULL

#define BixinWhiteListRequest_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, UENUM,    type,              1) \
X(a, STATIC,   OPTIONAL, STRING,   addr_in,           2)
#define BixinWhiteListRequest_CALLBACK NULL
#define BixinWhiteListRequest_DEFAULT NULL

#define BixinWhiteListAck_FIELDLIST(X, a) \
X(a, STATIC,   REPEATED, STRING,   address,           1)
#define BixinWhiteListAck_CALLBACK NULL
#define BixinWhiteListAck_DEFAULT NULL

#define BixinLoadDevice_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, STRING,   mnemonics,         1) \
X(a, STATIC,   OPTIONAL, STRING,   language,          5) \
X(a, STATIC,   OPTIONAL, STRING,   label,             6) \
X(a, STATIC,   OPTIONAL, BOOL,     skip_checksum,     7)
#define BixinLoadDevice_CALLBACK NULL
#define BixinLoadDevice_DEFAULT (const pb_byte_t*)"\x2a\x05\x65\x6e\x2d\x55\x53\x00"

#define BixinBackupDevice_FIELDLIST(X, a) \

#define BixinBackupDevice_CALLBACK NULL
#define BixinBackupDevice_DEFAULT NULL

#define BixinBackupDeviceAck_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, STRING,   mnemonics,         1)
#define BixinBackupDeviceAck_CALLBACK NULL
#define BixinBackupDeviceAck_DEFAULT NULL

#define FactorySet_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, STRING,   product,           1) \
X(a, STATIC,   REQUIRED, STRING,   hardware_id,       2) \
X(a, STATIC,   REQUIRED, STRING,   shell_color,       3) \
X(a, STATIC,   REQUIRED, STRING,   factory_id,        4) \
X(a, STATIC,   REQUIRED, STRING,   utc,               5) \
X(a, STATIC,   REQUIRED, STRING,   serial_no,         6)
#define FactorySet_CALLBACK NULL
#define FactorySet_DEFAULT NULL

#define DeviceInfoSettings_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, MESSAGE,  serial,            1)
#define DeviceInfoSettings_CALLBACK NULL
#define DeviceInfoSettings_DEFAULT NULL
#define DeviceInfoSettings_serial_MSGTYPE FactorySet

#define GetDeviceInfo_FIELDLIST(X, a) \

#define GetDeviceInfo_CALLBACK NULL
#define GetDeviceInfo_DEFAULT NULL

#define DeviceInfo_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, MESSAGE,  factory_info,      1) \
X(a, STATIC,   OPTIONAL, STRING,   spiFlash_info,     2) \
X(a, STATIC,   OPTIONAL, STRING,   SE_info,           3)
#define DeviceInfo_CALLBACK NULL
#define DeviceInfo_DEFAULT NULL
#define DeviceInfo_factory_info_MSGTYPE FactorySet

#define ReadSEPublicKey_FIELDLIST(X, a) \

#define ReadSEPublicKey_CALLBACK NULL
#define ReadSEPublicKey_DEFAULT NULL

#define SEPublicKey_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, BYTES,    public_key,        1)
#define SEPublicKey_CALLBACK NULL
#define SEPublicKey_DEFAULT NULL

#define WriteSEPublicCert_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, BYTES,    public_cert,       1)
#define WriteSEPublicCert_CALLBACK NULL
#define WriteSEPublicCert_DEFAULT NULL

#define ReadSEPublicCert_FIELDLIST(X, a) \

#define ReadSEPublicCert_CALLBACK NULL
#define ReadSEPublicCert_DEFAULT NULL

#define SEPublicCert_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, BYTES,    public_cert,       1)
#define SEPublicCert_CALLBACK NULL
#define SEPublicCert_DEFAULT NULL

#define SpiFlashWrite_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, UINT32,   address,           1) \
X(a, STATIC,   REQUIRED, BYTES,    data,              2)
#define SpiFlashWrite_CALLBACK NULL
#define SpiFlashWrite_DEFAULT NULL

#define SpiFlashRead_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, UINT32,   address,           1) \
X(a, STATIC,   REQUIRED, UINT32,   len,               2)
#define SpiFlashRead_CALLBACK NULL
#define SpiFlashRead_DEFAULT NULL

#define SpiFlashData_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, BYTES,    data,              1)
#define SpiFlashData_CALLBACK NULL
#define SpiFlashData_DEFAULT NULL

#define SESignMessage_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, BYTES,    message,           1)
#define SESignMessage_CALLBACK NULL
#define SESignMessage_DEFAULT NULL

#define SEMessageSignature_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, BYTES,    signature,         1)
#define SEMessageSignature_CALLBACK NULL
#define SEMessageSignature_DEFAULT NULL

extern const pb_msgdesc_t Initialize_msg;
extern const pb_msgdesc_t GetFeatures_msg;
extern const pb_msgdesc_t Features_msg;
extern const pb_msgdesc_t LockDevice_msg;
extern const pb_msgdesc_t EndSession_msg;
extern const pb_msgdesc_t ApplySettings_msg;
extern const pb_msgdesc_t ApplyFlags_msg;
extern const pb_msgdesc_t ChangePin_msg;
extern const pb_msgdesc_t ChangeWipeCode_msg;
extern const pb_msgdesc_t SdProtect_msg;
extern const pb_msgdesc_t Ping_msg;
extern const pb_msgdesc_t Cancel_msg;
extern const pb_msgdesc_t GetEntropy_msg;
extern const pb_msgdesc_t Entropy_msg;
extern const pb_msgdesc_t WipeDevice_msg;
extern const pb_msgdesc_t LoadDevice_msg;
extern const pb_msgdesc_t ResetDevice_msg;
extern const pb_msgdesc_t BackupDevice_msg;
extern const pb_msgdesc_t EntropyRequest_msg;
extern const pb_msgdesc_t EntropyAck_msg;
extern const pb_msgdesc_t RecoveryDevice_msg;
extern const pb_msgdesc_t WordRequest_msg;
extern const pb_msgdesc_t WordAck_msg;
extern const pb_msgdesc_t SetU2FCounter_msg;
extern const pb_msgdesc_t GetNextU2FCounter_msg;
extern const pb_msgdesc_t NextU2FCounter_msg;
extern const pb_msgdesc_t DoPreauthorized_msg;
extern const pb_msgdesc_t PreauthorizedRequest_msg;
extern const pb_msgdesc_t CancelAuthorization_msg;
extern const pb_msgdesc_t BixinSeedOperate_msg;
extern const pb_msgdesc_t BixinMessageSE_msg;
extern const pb_msgdesc_t BixinOutMessageSE_msg;
extern const pb_msgdesc_t BixinReboot_msg;
extern const pb_msgdesc_t BixinBackupRequest_msg;
extern const pb_msgdesc_t BixinBackupAck_msg;
extern const pb_msgdesc_t BixinRestoreRequest_msg;
extern const pb_msgdesc_t BixinRestoreAck_msg;
extern const pb_msgdesc_t BixinVerifyDeviceRequest_msg;
extern const pb_msgdesc_t BixinVerifyDeviceAck_msg;
extern const pb_msgdesc_t BixinWhiteListRequest_msg;
extern const pb_msgdesc_t BixinWhiteListAck_msg;
extern const pb_msgdesc_t BixinLoadDevice_msg;
extern const pb_msgdesc_t BixinBackupDevice_msg;
extern const pb_msgdesc_t BixinBackupDeviceAck_msg;
extern const pb_msgdesc_t FactorySet_msg;
extern const pb_msgdesc_t DeviceInfoSettings_msg;
extern const pb_msgdesc_t GetDeviceInfo_msg;
extern const pb_msgdesc_t DeviceInfo_msg;
extern const pb_msgdesc_t ReadSEPublicKey_msg;
extern const pb_msgdesc_t SEPublicKey_msg;
extern const pb_msgdesc_t WriteSEPublicCert_msg;
extern const pb_msgdesc_t ReadSEPublicCert_msg;
extern const pb_msgdesc_t SEPublicCert_msg;
extern const pb_msgdesc_t SpiFlashWrite_msg;
extern const pb_msgdesc_t SpiFlashRead_msg;
extern const pb_msgdesc_t SpiFlashData_msg;
extern const pb_msgdesc_t SESignMessage_msg;
extern const pb_msgdesc_t SEMessageSignature_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define Initialize_fields &Initialize_msg
#define GetFeatures_fields &GetFeatures_msg
#define Features_fields &Features_msg
#define LockDevice_fields &LockDevice_msg
#define EndSession_fields &EndSession_msg
#define ApplySettings_fields &ApplySettings_msg
#define ApplyFlags_fields &ApplyFlags_msg
#define ChangePin_fields &ChangePin_msg
#define ChangeWipeCode_fields &ChangeWipeCode_msg
#define SdProtect_fields &SdProtect_msg
#define Ping_fields &Ping_msg
#define Cancel_fields &Cancel_msg
#define GetEntropy_fields &GetEntropy_msg
#define Entropy_fields &Entropy_msg
#define WipeDevice_fields &WipeDevice_msg
#define LoadDevice_fields &LoadDevice_msg
#define ResetDevice_fields &ResetDevice_msg
#define BackupDevice_fields &BackupDevice_msg
#define EntropyRequest_fields &EntropyRequest_msg
#define EntropyAck_fields &EntropyAck_msg
#define RecoveryDevice_fields &RecoveryDevice_msg
#define WordRequest_fields &WordRequest_msg
#define WordAck_fields &WordAck_msg
#define SetU2FCounter_fields &SetU2FCounter_msg
#define GetNextU2FCounter_fields &GetNextU2FCounter_msg
#define NextU2FCounter_fields &NextU2FCounter_msg
#define DoPreauthorized_fields &DoPreauthorized_msg
#define PreauthorizedRequest_fields &PreauthorizedRequest_msg
#define CancelAuthorization_fields &CancelAuthorization_msg
#define BixinSeedOperate_fields &BixinSeedOperate_msg
#define BixinMessageSE_fields &BixinMessageSE_msg
#define BixinOutMessageSE_fields &BixinOutMessageSE_msg
#define BixinReboot_fields &BixinReboot_msg
#define BixinBackupRequest_fields &BixinBackupRequest_msg
#define BixinBackupAck_fields &BixinBackupAck_msg
#define BixinRestoreRequest_fields &BixinRestoreRequest_msg
#define BixinRestoreAck_fields &BixinRestoreAck_msg
#define BixinVerifyDeviceRequest_fields &BixinVerifyDeviceRequest_msg
#define BixinVerifyDeviceAck_fields &BixinVerifyDeviceAck_msg
#define BixinWhiteListRequest_fields &BixinWhiteListRequest_msg
#define BixinWhiteListAck_fields &BixinWhiteListAck_msg
#define BixinLoadDevice_fields &BixinLoadDevice_msg
#define BixinBackupDevice_fields &BixinBackupDevice_msg
#define BixinBackupDeviceAck_fields &BixinBackupDeviceAck_msg
#define FactorySet_fields &FactorySet_msg
#define DeviceInfoSettings_fields &DeviceInfoSettings_msg
#define GetDeviceInfo_fields &GetDeviceInfo_msg
#define DeviceInfo_fields &DeviceInfo_msg
#define ReadSEPublicKey_fields &ReadSEPublicKey_msg
#define SEPublicKey_fields &SEPublicKey_msg
#define WriteSEPublicCert_fields &WriteSEPublicCert_msg
#define ReadSEPublicCert_fields &ReadSEPublicCert_msg
#define SEPublicCert_fields &SEPublicCert_msg
#define SpiFlashWrite_fields &SpiFlashWrite_msg
#define SpiFlashRead_fields &SpiFlashRead_msg
#define SpiFlashData_fields &SpiFlashData_msg
#define SESignMessage_fields &SESignMessage_msg
#define SEMessageSignature_fields &SEMessageSignature_msg

/* Maximum encoded size of messages (where known) */
#define Initialize_size                          34
#define GetFeatures_size                         0
#define Features_size                            927
#define LockDevice_size                          0
#define EndSession_size                          0
#define ApplySettings_size                       1133
#define ApplyFlags_size                          6
#define ChangePin_size                           2
#define ChangeWipeCode_size                      2
#define SdProtect_size                           2
#define Ping_size                                260
#define Cancel_size                              0
#define GetEntropy_size                          6
#define Entropy_size                             1027
#define WipeDevice_size                          0
#define LoadDevice_size                          3965
#define ResetDevice_size                         76
#define BackupDevice_size                        0
#define EntropyRequest_size                      0
#define EntropyAck_size                          131
#define RecoveryDevice_size                      74
#define WordRequest_size                         2
#define WordAck_size                             13
#define SetU2FCounter_size                       6
#define GetNextU2FCounter_size                   0
#define NextU2FCounter_size                      6
#define DoPreauthorized_size                     0
#define PreauthorizedRequest_size                0
#define CancelAuthorization_size                 0
#define BixinSeedOperate_size                    517
#define BixinMessageSE_size                      1027
#define BixinOutMessageSE_size                   1027
#define BixinReboot_size                         0
#define BixinBackupRequest_size                  0
#define BixinBackupAck_size                      515
#define BixinRestoreRequest_size                 569
#define BixinRestoreAck_size                     515
#define BixinVerifyDeviceRequest_size            515
#define BixinVerifyDeviceAck_size                1542
#define BixinWhiteListRequest_size               134
#define BixinWhiteListAck_size                   1320
#define BixinLoadDevice_size                     297
#define BixinBackupDevice_size                   0
#define BixinBackupDeviceAck_size                243
#define FactorySet_size                          36
#define DeviceInfoSettings_size                  38
#define GetDeviceInfo_size                       0
#define DeviceInfo_size                          72
#define ReadSEPublicKey_size                     0
#define SEPublicKey_size                         66
#define WriteSEPublicCert_size                   419
#define ReadSEPublicCert_size                    0
#define SEPublicCert_size                        419
#define SpiFlashWrite_size                       1033
#define SpiFlashRead_size                        12
#define SpiFlashData_size                        1027
#define SESignMessage_size                       1027
#define SEMessageSignature_size                  66

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
