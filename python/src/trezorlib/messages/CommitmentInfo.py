# Automatically generated by pb2py
# fmt: off
from .. import protobuf as p

from .HTLCInfo import HTLCInfo
from .PubKey import PubKey

if __debug__:
    try:
        from typing import Dict, List  # noqa: F401
        from typing_extensions import Literal  # noqa: F401
    except ImportError:
        pass


class CommitmentInfo(p.MessageType):

    def __init__(
        self,
        feerate_sat_per_kw: int = None,
        n: int = None,
        to_local_value_sat: int = None,
        to_remote_value_sat: int = None,
        per_commitment_point: PubKey = None,
        offered_htlcs: List[HTLCInfo] = None,
        received_htlcs: List[HTLCInfo] = None,
    ) -> None:
        self.feerate_sat_per_kw = feerate_sat_per_kw
        self.n = n
        self.to_local_value_sat = to_local_value_sat
        self.to_remote_value_sat = to_remote_value_sat
        self.per_commitment_point = per_commitment_point
        self.offered_htlcs = offered_htlcs if offered_htlcs is not None else []
        self.received_htlcs = received_htlcs if received_htlcs is not None else []

    @classmethod
    def get_fields(cls) -> Dict:
        return {
            1: ('feerate_sat_per_kw', p.UVarintType, 0),
            2: ('n', p.UVarintType, 0),
            4: ('to_local_value_sat', p.UVarintType, 0),
            5: ('to_remote_value_sat', p.UVarintType, 0),
            6: ('per_commitment_point', PubKey, 0),
            10: ('offered_htlcs', HTLCInfo, p.FLAG_REPEATED),
            11: ('received_htlcs', HTLCInfo, p.FLAG_REPEATED),
        }
